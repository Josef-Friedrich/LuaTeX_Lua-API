local assert = require("utils").assert

local subtypes = {}

for _, node_type in pairs(node.types()) do
  local subtype = node.subtypes(node_type)
  if subtype then
    subtypes[node_type] = subtype
  end
end

assert.same(subtypes, {
  accent = {
    "fixedtop",
    "fixedbottom",
    "fixedboth",
    [0] = "bothflexible",
  },
  adjust = { "pre", [0] = "normal" },
  boundary = { "user", "protrusion", "word", [0] = "cancel" },
  dir = { "cancel", [0] = "normal" },
  disc = {
    "explicit",
    "automatic",
    "regular",
    "first",
    "second",
    [0] = "discretionary",
  },
  fence = { "left", "middle", "right", "no", [0] = "unset" },
  glue = {
    "lineskip",
    "baselineskip",
    "parskip",
    "abovedisplayskip",
    "belowdisplayskip",
    "abovedisplayshortskip",
    "belowdisplayshortskip",
    "leftskip",
    "rightskip",
    "topskip",
    "splittopskip",
    "tabskip",
    "spaceskip",
    "xspaceskip",
    "parfillskip",
    "mathskip",
    "thinmuskip",
    "medmuskip",
    "thickmuskip",
    [0] = "userskip",
    [98] = "conditionalmathskip",
    [99] = "muglue",
    [100] = "leaders",
    [101] = "cleaders",
    [102] = "xleaders",
    [103] = "gleaders",
  },
  glyph = {
    "character",
    "ligature",
    [0] = "unset",
    [4] = "ghost",
    [8] = "left",
    [16] = "right",
  },
  hlist = {
    "line",
    "box",
    "indent",
    "alignment",
    "cell",
    "equation",
    "equationnumber",
    "math",
    "mathchar",
    "hextensible",
    "vextensible",
    "hdelimiter",
    "vdelimiter",
    "overdelimiter",
    "underdelimiter",
    "numerator",
    "denominator",
    "limits",
    "fraction",
    "nucleus",
    "sup",
    "sub",
    "degree",
    "scripts",
    "over",
    "under",
    "accent",
    "radical",
    [0] = "unknown",
  },
  kern = {
    "userkern",
    "accentkern",
    "italiccorrection",
    [0] = "fontkern",
  },
  math = { "endmath", [0] = "beginmath" },
  noad = {
    "opdisplaylimits",
    "oplimits",
    "opnolimits",
    "bin",
    "rel",
    "open",
    "close",
    "punct",
    "inner",
    "under",
    "over",
    "vcenter",
    [0] = "ord",
  },
  penalty = {
    "linebreakpenalty",
    "linepenalty",
    "wordpenalty",
    "finalpenalty",
    "noadpenalty",
    "beforedisplaypenalty",
    "afterdisplaypenalty",
    "equationnumberpenalty",
    [0] = "userpenalty",
  },
  radical = {
    "uradical",
    "uroot",
    "uunderdelimiter",
    "uoverdelimiter",
    "udelimiterunder",
    "udelimiterover",
    [0] = "radical",
  },
  rule = {
    "box",
    "image",
    "empty",
    "user",
    "over",
    "under",
    "fraction",
    "radical",
    "outline",
    [0] = "normal",
  },
  vlist = {
    "line",
    "box",
    "indent",
    "alignment",
    "cell",
    "equation",
    "equationnumber",
    "math",
    "mathchar",
    "hextensible",
    "vextensible",
    "hdelimiter",
    "vdelimiter",
    "overdelimiter",
    "underdelimiter",
    "numerator",
    "denominator",
    "limits",
    "fraction",
    "nucleus",
    "sup",
    "sub",
    "degree",
    "scripts",
    "over",
    "under",
    "accent",
    "radical",
    [0] = "unknown",
  },
})
