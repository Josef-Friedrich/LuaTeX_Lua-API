---% language=uk
---
---\environment luatex-style
---
---\startcomponent luatex-fontloader
---
---# The fontloader
---
---The fontloader library is sort of independent of the rest in the sense that it
---can load font into a *Lua* table that then can be converted into a table suitable
---for *TeX*. The library is an adapted subset of *FontForge* and as such gives a
---similar view on a font (which has advantages when you want to debug). We will not
---discuss *OpenType* in detail here as the *Microsoft* website offers enough
---information about it. The tables returned by the loader are not that far from the
---standard. We have no plans to extend the loader (it may even become an external
---module at some time).
---
---# Getting quick information on a font[library=fontloader]
---
---When you want to locate font by name you need some basic information that is
---hidden in the font files. For that reason we provide an efficient helper that
---gets the basic information without loading all of the font. Normally this helper
---is used to create a font (name) database.
---
---```
---<table> info =
---    fontloader.info(<string> filename)
---```
---
---This function returns either `nil`, or a `table`, or an array of
---small tables (in the case of a *TrueType* collection). The returned table(s) will
---contain some fairly interesting information items from the font(s) defined by the
---file:
---
--- key                  type      explanation 
---
---@field fontname string # the *PostScript* name of the font
---@field fullname string # the formal name of the font
---@field familyname string # the family name this font belongs to
---@field weight string # a string indicating the color value of the font
---@field version string # the internal font version
---@field italicangle float # the slant angle
---@field units_per_em number # 1000 for *PostScript*-based fonts, usually 2048 for *TrueType*NC \NR
---@field pfminfo table # (see \in{section}[fontloaderpfminfotable])
---
---Getting information through this function is (sometimes much) more efficient than
---loading the font properly, and is therefore handy when you want to create a
---dictionary of available fonts based on a directory contents.
---
----------------------------------------------------------------


---
---# Loading an *OpenType* or *TrueType* file[library=fontloader]
---
---If you want to use an *OpenType* font, you have to get the metric information
---from somewhere. Using the `fontloader` library, the simplest way to get
---that information is thus:
---
---```
---function load_font (filename)
---  local metrics = nil
---  local font = fontloader.open(filename)
---  if font then
---     metrics = fontloader.to_table(font)
---     fontloader.close(font)
---  end
---  return metrics
---end
---
---myfont = load_font('/opt/tex/texmf/fonts/data/arial.ttf')
---```
---
---The main function call is
---
---```
---<userdata> f, <table> w = fontloader.open(<string> filename)
---<userdata> f, <table> w = fontloader.open(<string> filename, <string> fontname)
---```
---
---The first return value is a userdata representation of the font. The second
---return value is a table containing any warnings and errors reported by fontloader
---while opening the font. In normal typesetting, you would probably ignore the
---second argument, but it can be useful for debugging purposes.
---
---For *TrueType* collections (when filename ends in 'ttc') and \DFONT\ collections,
---you have to use a second string argument to specify which font you want from the
---collection. Use the `fontname` strings that are returned by `fontloader.info` for that.
---
---To turn the font into a table, `fontloader.to_table` is used on the font
---returned by `fontloader.open`.
---
---```
---<table> f = fontloader.to_table(<userdata> font)
---```
---
---This table cannot be used directly by *LuaTeX* and should be turned into another
---one as described in \in {chapter} [fonts]. Do not forget to store the `fontname` value in the `psname` field of the metrics table to be returned
---to *LuaTeX*, otherwise the font inclusion backend will not be able to find the
---correct font in the collection.
---
---See \in {section} [fontloadertables] for details on the userdata object returned
---by `fontloader.open` and the layout of the `metrics` table returned
---by `fontloader.to_table`.
---
---The font file is parsed and partially interpreted by the font loading routines
---from *FontForge*. The file format can be *OpenType*, *TrueType*, *TrueType*
---Collection, \CFF, or \TYPEONE.
---
---There are a few advantages to this approach compared to reading the actual font
---file ourselves:
---
---* The font is automatically re-encoded, so that the `metrics` table for
---    *TrueType* and *OpenType* fonts is using *Unicode* for the character indices.
---
---* Many features are pre-processed into a format that is easier to handle than
---    just the bare tables would be.
---
---* *PostScript*-based *OpenType* fonts do not store the character height and
---    depth in the font file, so the character boundingbox has to be calculated in
---    some way.
---
---A loaded font is discarded with:
---
---```
---fontloader.close(<userdata> font)
---```
---
----------------------------------------------------------------


---
---# Applying a “feature file”[library=fontloader]
---
---You can apply a “feature file” to a loaded font:
---
---```
---<table> errors = fontloader.apply_featurefile(<userdata> font, <string> filename)
---```
---
---A “feature file” is a textual representation of the features in an
---*OpenType* font. See
---
---```
---http://www.adobe.com/devnet/opentype/afdko/topic_feature_file_syntax.html
---```
---
---and
---
---```
---http://fontforge.sourceforge.net/featurefile.html
---```
---
---for a more detailed description of feature files.
---
---If the function fails, the return value is a table containing any errors reported
---by fontloader while applying the feature file. On success, `nil` is
---returned.
---
----------------------------------------------------------------


---
---# Applying an “\AFM\ file”[library=fontloader]
---
---You can apply an “\AFM\ file” to a loaded font:
---
---```
---<table> errors = fontloader.apply_afmfile(<userdata> font, <string> filename)
---```
---
---An \AFM\ file is a textual representation of (some of) the meta information
---in a \TYPEONE\ font. See
---
---```
---ftp://ftp.math.utah.edu/u/ma/hohn/linux/postscript/5004.AFM_Spec.pdf
---```
---
---for more information about \AFM\ files.
---
---Note: If you `fontloader.open` a \TYPEONE\ file named `font.pfb`,
---the library will automatically search for and apply `font.afm` if it exists
---in the same directory as the file `font.pfb`. In that case, there is no
---need for an explicit call to `apply_afmfile()`.
---
---If the function fails, the return value is a table containing any errors reported
---by fontloader while applying the AFM file. On success, `nil` is returned.
---
----------------------------------------------------------------


---
---\startsection[title={Fontloader font tables},reference=fontloadertables][library=fontloader]
---
---As mentioned earlier, the return value of `fontloader.open` is a userdata
---object. One way to have access to the actual metrics is to call `fontloader.to_table` on this object, returning the table structure that is
---explained in the following sections. In the following sections we will not
---explain each field in detail. Most fields are self descriptive and for the more
---technical aspects you need to consult the relevant font references.
---
---It turns out that the result from `fontloader.to_table` sometimes needs
---very large amounts of memory (depending on the font's complexity and size) so it
---is possible to access the userdata object directly.
---
---* All top-level keys that would be returned by `to_table()`
---    can also be accessed directly.
---
---* The top-level key “glyphs” returns a {\it virtual\/} array that
---    allows indices from `f.glyphmin` to (`f.glyphmax`).
---
---* The items in that virtual array (the actual glyphs) are themselves also
---    userdata objects, and each has accessors for all of the keys explained in the
---    section “Glyph items” below.
---
---* The top-level key “subfonts” returns an {\it actual} array of userdata
---    objects, one for each of the subfonts (or nil, if there are no subfonts).
---
---A short example may be helpful. This code generates a printout of all
---the glyph names in the font `PunkNova.kern.otf`:
---
---```
---local f = fontloader.open('PunkNova.kern.otf')
---print (f.fontname)
---local i = 0
---if f.glyphcnt > 0 then
---    for i=f.glyphmin,f.glyphmax do
---       local g = f.glyphs[i]
---       if g then print(g.name)
---       end
---       i = i + 1
---    end
---end
---fontloader.close(f)
---```
---
---In this case, the *LuaTeX* memory requirement stays below 100MB on the test
---computer, while the internal structure generated by `to_table()` needs more
---than 2GB of memory (the font itself is 6.9MB in disk size).
---
---Only the top-level font, the subfont table entries, and the glyphs are virtual
---objects, everything else still produces normal *Lua* values and tables.
---
---If you want to know the valid fields in a font or glyph structure, call the `fields` function on an object of a particular type (either glyph or font):
---
---```
---<table> fields = fontloader.fields(<userdata> font)
---<table> fields = fontloader.fields(<userdata> font_glyph)
---```
---
---For instance:
---
---```
---local fields = fontloader.fields(f)
---local fields = fontloader.fields(f.glyphs[0])
---```
---
----------------------------------------------------------------


---
---# Table types[library=fontloader]
---
---# The main table
---
---The top-level keys in the returned table are (the explanations in this part of
---the documentation are not yet finished):
---
--- key                                  type      explanation 
---
---@field table_version string # indicates the metrics version (currently 0.3)
---@field fontname string # *PostScript* font name
---@field fullname string # official (human-oriented) font name
---@field familyname string # family name
---@field weight string # weight indicator
---@field copyright string # copyright information
---@field filename string # the file name
---@field version string # font version
---@field italicangle float # slant angle
---@field units_per_em number # 1000 for *PostScript*-based fonts, usually 2048 for *TrueType*NC \NR
---@field ascent number # height of ascender in `units_per_em`
---@field descent number # depth of descender in `units_per_em`
---@field upos float # 
---@field uwidth float # 
---@field uniqueid number # 
--- `glyphs`                        array     
---@field glyphcnt number # number of included glyphs
---@field glyphmax number # maximum used index the glyphs array
---@field glyphmin number # minimum used index the glyphs array
---@field notdef_loc number # location of the `.notdef` glyph or `-1` when not present 
---@field hasvmetrics number # 
---@field onlybitmaps number # 
---@field serifcheck number # 
---@field isserif number # 
---@field issans number # 
---@field encodingchanged number # 
---@field strokedfont number # 
---@field use_typo_metrics number # 
---@field weight_width_slope_only number # 
---@field head_optimized_for_cleartype number # 
--- `uni_interp`                    enum      `unset`, `none`, `adobe`, `greek`, `japanese`, `trad_chinese`, `simp_chinese`, `korean`, `ams`
---@field origname string # the file name, as supplied by the user
---@field map table # 
---@field private table # 
---@field xuid string # 
---@field pfminfo table # 
---@field names table # 
---@field cidinfo table # 
--- `subfonts`                      array     
---@field commments string # 
---@field fontlog string # 
---@field cvt_names string # 
---@field anchor_classes table # 
---@field ttf_tables table # 
---@field ttf_tab_saved table # 
---@field kerns table # 
---@field vkerns table # 
---@field texdata table # 
---@field lookups table # 
---@field gpos table # 
---@field gsub table # 
---@field mm table # 
---@field chosenname string # 
---@field macstyle number # 
---@field fondname string # 
---%NC `design_size`                   number    
---@field fontstyle_id number # 
---@field fontstyle_name table # 
---%NC `design_range_bottom`           number    
---%NC `design_range_top`              number    
---@field strokewidth float # 
---@field mark_classes table # 
---@field creationtime number # 
---@field modificationtime number # 
---@field os2_version number # 
---@field math table # 
---@field validation_state table # 
---@field horiz_base table # 
---@field vert_base table # 
---@field extrema_bound number # 
---@field truetype boolean # signals a *TrueType* font 
---
----------------------------------------------------------------


---
---# `glyphs`
---
---The `glyphs` is an array containing the per-character
---information (quite a few of these are only present if non-zero).
---
--- key                       type      explanation 
---
---@field name string # the glyph name 
---@field unicode number # unicode code point, or -1 
--- `boundingbox`        array     array of four numbers, see note below 
---@field width number # only for horizontal fonts 
---@field vwidth number # only for vertical fonts 
---@field tsidebearing number # only for vertical ttf/otf fonts, and only if non-zero 
---@field lsidebearing number # only if non-zero and not equal to boundingbox[1] 
---@field class string # one of "none", "base", "ligature", "mark", "component" (if not present, the glyph class is “automatic”) 
--- `kerns`              array     only for horizontal fonts, if set 
--- `vkerns`             array     only for vertical fonts, if set 
--- `dependents`         array     linear array of glyph name strings, only if nonempty
---@field lookups table # only if nonempty 
---@field ligatures table # only if nonempty 
---@field anchors table # only if set 
---@field comment string # only if set 
---@field tex_height number # only if set 
---@field tex_depth number # only if set 
---@field italic_correction number # only if set 
---@field top_accent number # only if set 
---@field is_extended_shape number # only if this character is part of a math extension list 
---@field altuni table # alternate *Unicode* items 
---@field vert_variants table # 
---@field horiz_variants table # 
---@field mathkern table # 
---
---On `boundingbox`: The boundingbox information for *TrueType* fonts and
---*TrueType*-based \OTF\ fonts is read directly from the font file.
---*PostScript*-based fonts do not have this information, so the boundingbox of
---traditional *PostScript* fonts is generated by interpreting the actual bezier
---curves to find the exact boundingbox. This can be a slow process, so the
---boundingboxes of *PostScript*-based \OTF\ fonts (and raw \CFF\ fonts) are
---calculated using an approximation of the glyph shape based on the actual glyph
---points only, instead of taking the whole curve into account. This means that
---glyphs that have missing points at extrema will have a too-tight boundingbox,
---but the processing is so much faster that in our opinion the tradeoff is worth
---it.
---
---The `kerns` and `vkerns` are linear arrays of small hashes:
---
--- key            type    explanation 
---
---@field char string # 
---@field off number # 
---@field lookup string # 
---
---The `lookups` is a hash, based on lookup subtable names, with
---the value of each key inside that a linear array of small hashes:
---
---% TODO: fix this description
---
--- key                   type  explanation 
---
--- `type`           enum  `position`, `pair`, `substitution`, `alternate`, `multiple`, `ligature`, `lcaret`, `kerning`, `vkerning`, `anchors`, `contextpos`, `contextsub`, `chainpos`, `chainsub`, `reversesub`, `max`, `kernback`, `vkernback` 
---@field specification table # extra data 
---
---For the first seven values of `type`, there can be additional
---sub-information, stored in the sub-table `specification`:
---
--- value                type      explanation 
---
---@field position table # a table of the `offset_specs` type 
---@field pair table # one string: `paired`, and an array of one or two `offset_specs` tables: `offsets` 
---@field substitution table # one string: `variant` 
---@field alternate table # one string: `components` 
---@field multiple table # one string: `components` 
---@field ligature table # two strings: `components`, `char` 
--- `lcaret`        array     linear array of numbers 
---
---Tables for `offset_specs` contain up to four number-valued fields: `x` (a horizontal offset), `y` (a vertical offset), `h` (an advance
---width correction) and `v` (an advance height correction).
---
---The `ligatures` is a linear array of small hashes:
---
--- key                type    explanation 
---
---@field lig table # uses the same substructure as a single item in the `lookups` table explained above 
---@field char string # 
--- `components`  array   linear array of named components 
---@field ccnt number # 
---
---The `anchor` table is indexed by a string signifying the anchor type, which
---is one of:
---
--- key              type   explanation 
---
---@field mark table # placement mark 
---@field basechar table # mark for attaching combining items to a base char 
---@field baselig table # mark for attaching combining items to a ligature 
---@field basemark table # generic mark for attaching combining items to connect to 
---@field centry table # cursive entry point 
---@field cexit table # cursive exit point 
---
---The content of these is a short array of defined anchors, with the
---entry keys being the anchor names. For all except `baselig`, the
---value is a single table with this definition:
---
--- key                  type    explanation 
---
---@field x number # x location 
---@field y number # y location 
---@field ttf_pt_index number # truetype point index, only if given 
---
---For `baselig`, the value is a small array of such anchor sets sets, one for
---each constituent item of the ligature.
---
---For clarification, an anchor table could for example look like this :
---
---```
---['anchor'] = {
---    ['basemark'] = {
---        ['Anchor-7'] = { ['x']=170, ['y']=1080 }
---    },
---    ['mark'] ={
---        ['Anchor-1'] = { ['x']=160, ['y']=810 },
---        ['Anchor-4'] = { ['x']=160, ['y']=800 }
---    },
---    ['baselig'] = {
---        [1] = { ['Anchor-2'] = { ['x']=160, ['y']=650 } },
---        [2] = { ['Anchor-2'] = { ['x']=460, ['y']=640 } }
---        }
---    }
---```
---
---Note: The `baselig` table can be sparse!
---
----------------------------------------------------------------


---
---# `map`
---
---The top-level map is a list of encoding mappings. Each of those is a table
---itself.
---
--- key              type    explanation 
---
---@field enccount number # 
---@field encmax number # 
---@field backmax number # 
---@field remap table # 
--- `map`       array   non-linear array of mappings
--- `backmap`   array   non-linear array of backward mappings
---@field enc table # 
---
---The `remap` table is very small:
---
--- key              type    explanation 
---
---@field firstenc number # 
---@field lastenc number # 
---@field infont number # 
---
---The `enc` table is a bit more verbose:
---
--- key                      type    explanation 
---
---@field enc_name string # 
---@field char_cnt number # 
---@field char_max number # 
--- `unicode`           array   of *Unicode* position numbers
--- `psnames`           array   of *PostScript* glyph names
---@field builtin number # 
---@field hidden number # 
---@field only_1byte number # 
---@field has_1byte number # 
---@field has_2byte number # 
---@field is_unicodebmp number # only if non-zero
---@field is_unicodefull number # only if non-zero
---@field is_custom number # only if non-zero
---@field is_original number # only if non-zero
---@field is_compact number # only if non-zero
---@field is_japanese number # only if non-zero
---@field is_korean number # only if non-zero
---@field is_tradchinese number # only if non-zero [name?]
---@field is_simplechinese number # only if non-zero
---@field low_page number # 
---@field high_page number # 
---@field iconv_name string # 
---@field iso_2022_escape string # 
---
----------------------------------------------------------------


---
---# `private`
---
---This is the font's private *PostScript* dictionary, if any. Keys and values are
---both strings.
---
----------------------------------------------------------------


---
---# `cidinfo`
---
--- key                type    explanation 
---
---@field registry string # 
---@field ordering string # 
---@field supplement number # 
---@field version number # 
---
----------------------------------------------------------------


---
---# `pfminfo`
---
---The `pfminfo` table contains most of the OS/2 information:
---
--- key                      type    explanation 
---
---@field pfmset number # 
---@field winascent_add number # 
---@field windescent_add number # 
---@field hheadascent_add number # 
---@field hheaddescent_add number # 
---@field typoascent_add number # 
---@field typodescent_add number # 
---@field subsuper_set number # 
---@field panose_set number # 
---@field hheadset number # 
---@field vheadset number # 
---@field pfmfamily number # 
---@field weight number # 
---@field width number # 
---@field avgwidth number # 
---@field firstchar number # 
---@field lastchar number # 
---@field fstype number # 
---@field linegap number # 
---@field vlinegap number # 
---@field hhead_ascent number # 
---@field hhead_descent number # 
---@field os2_typoascent number # 
---@field os2_typodescent number # 
---@field os2_typolinegap number # 
---@field os2_winascent number # 
---@field os2_windescent number # 
---@field os2_subxsize number # 
---@field os2_subysize number # 
---@field os2_subxoff number # 
---@field os2_subyoff number # 
---@field os2_supxsize number # 
---@field os2_supysize number # 
---@field os2_supxoff number # 
---@field os2_supyoff number # 
---@field os2_strikeysize number # 
---@field os2_strikeypos number # 
---@field os2_family_class number # 
---@field os2_xheight number # 
---@field os2_capheight number # 
---@field os2_defaultchar number # 
---@field os2_breakchar number # 
---@field os2_vendor string # 
---@field codepages table # A two-number array of encoded code pages 
---@field unicoderages table # A four-number array of encoded unicode ranges 
---@field panose table # 
---
---The `panose` subtable has exactly 10 string keys:
---
--- key                     type     explanation 
---
---@field familytype string # Values as in the *OpenType* font specification: `Any`, `No Fit`, `Text and Display`, `Script`, `Decorative`, `Pictorial`  \NR
---@field serifstyle string # See the *OpenType* font specification for values 
---@field weight string # idem 
---@field proportion string # idem 
---@field contrast string # idem 
---@field strokevariation string # idem 
---@field armstyle string # idem 
---@field letterform string # idem 
---@field midline string # idem 
---@field xheight string # idem 
---
----------------------------------------------------------------


---
---# `names`
---
---Each item has two top-level keys:
---
--- key           type    explanation 
---
---@field lang string # language for this entry 
---@field names table # 
---
---The `names` keys are the actual *TrueType* name strings. The possible keys
---are: `copyright`, `family`, `subfamily`, `uniqueid`,
---`fullname`, `version`, `postscriptname`, `trademark`,
---`manufacturer`, `designer`, `descriptor`, `venderurl`,
---`designerurl`, `license`, `licenseurl`, `idontknow`,
---`preffamilyname`, `prefmodifiers`, `compatfull`, `sampletext`, `cidfindfontname`, `wwsfamily` and `wwssubfamily`.
---
----------------------------------------------------------------


---
---# `anchor_classes`
---
---The anchor_classes classes:
---
--- key            type    explanation 
---
---@field name string # a descriptive id of this anchor class
---@field lookup string # 
---@field type string # one of `mark`, `mkmk`, `curs`, `mklg` 
---
---% type is actually a lookup subtype, not a feature name. Officially, these
---% strings should be gpos_mark2mark etc.
---
----------------------------------------------------------------


---
---# `gpos`
---
---The `gpos` table has one array entry for each lookup. (The `gpos_`
---prefix is somewhat redundant.)
---
--- key               type    explanation 
---
---@field type string # one of `gpos_single`, `gpos_pair`, `gpos_cursive`, `gpos_mark2base`,\crlf `gpos_mark2ligature`, `gpos_mark2mark`, `gpos_context`,\crlf `gpos_contextchain` 
---@field flags table # 
---@field name string # 
--- `features`   array   
--- `subtables`  array   
---
---The flags table has a true value for each of the lookup flags that is actually
---set:
---
--- key                          type     explanation 
---
---@field r2l boolean # 
---@field ignorebaseglyphs boolean # 
---@field ignoreligatures boolean # 
---@field ignorecombiningmarks boolean # 
---@field mark_class string # 
---
---The features subtable items of gpos have:
---
--- key             type    explanation 
---
---@field tag string # 
---@field scripts table # 
---
---The scripts table within features has:
---
--- key            type              explanation 
---
---@field script string # 
--- `langs`   array of strings  
---
---The subtables table has:
---
--- key                      type    explanation 
---
---@field name string # 
---@field suffix string # (only if used) % used by gpos_single to get a default
---@field anchor_classes number # (only if used)
---@field vertical_kerning number # (only if used)
---@field kernclass table # (only if used)
---
---The kernclass with subtables table has:
---
--- key             type              explanation 
---
--- `firsts`   array of strings  
--- `seconds`  array of strings  
---@field lookup string # or array   associated lookup(s) 
--- `offsets`  array of numbers  
---
---Note: the kernclass (as far as we can see) always has one entry so it could be one level
---deep instead. Also the seconds start at `[2]` which is close to the fontforge
---internals so we keep that too.
---
----------------------------------------------------------------


---
---# `gsub`
---
---This has identical layout to the `gpos` table, except for the
---type:
---
--- key          type    explanation 
---
---@field type string # one of `gsub_single`, `gsub_multiple`, `gsub_alternate`, `gsub_ligature`,\crlf `gsub_context`, `gsub_contextchain`, `gsub_reversecontextchain` 
---
----------------------------------------------------------------


---
---# `ttf_tables` and `ttf_tab_saved`
---
--- key            type    explanation 
---
---@field tag string # 
---@field len number # 
---@field maxlen number # 
---@field data number # 
---
----------------------------------------------------------------


---
---# `mm`
---
--- key                    type    explanation 
---
---@field axes table # array of axis names 
---@field instance_count number # 
---@field positions table # array of instance positions (\#axes * instances )
---@field defweights table # array of default weights for instances 
---@field cdv string # 
---@field ndv string # 
---@field axismaps table # 
---
---The `axismaps`:
---
--- key             type    explanation 
---
---@field blends table # an array of blend points 
---@field designs table # an array of design values 
---@field min number # 
---@field def number # 
---@field max number # 
---
----------------------------------------------------------------


---
---# `mark_classes`
---
---The keys in this table are mark class names, and the values are a
---space-separated string of glyph names in this class.
---
----------------------------------------------------------------


---
---# `math`
---
---The math table has the variables that are also discussed in the chapter about
---math: `ScriptPercentScaleDown`, `ScriptScriptPercentScaleDown`, `DelimitedSubFormulaMinHeight`, `DisplayOperatorMinHeight`, `MathLeading`, `AxisHeight`, `AccentBaseHeight`, `FlattenedAccentBaseHeight`, `SubscriptShiftDown`, `SubscriptTopMax`,
---`SubscriptBaselineDropMin`, `SuperscriptShiftUp`, `SuperscriptShiftUpCramped`, `SuperscriptBottomMin`, `SuperscriptBaselineDropMax`, `SubSuperscriptGapMin`, `SuperscriptBottomMaxWithSubscript`, `SpaceAfterScript`, `UpperLimitGapMin`, `UpperLimitBaselineRiseMin`, `LowerLimitGapMin`,
---`LowerLimitBaselineDropMin`, `StackTopShiftUp`, `StackTopDisplayStyleShiftUp`, `StackBottomShiftDown`, `StackBottomDisplayStyleShiftDown`, `StackGapMin`, `StackDisplayStyleGapMin`, `StretchStackTopShiftUp`, `StretchStackBottomShiftDown`, `StretchStackGapAboveMin`, `StretchStackGapBelowMin`, `FractionNumeratorShiftUp`, `FractionNumeratorDisplayStyleShiftUp`, `FractionDenominatorShiftDown`,
---`FractionDenominatorDisplayStyleShiftDown`, `FractionNumeratorGapMin`, `FractionNumeratorDisplayStyleGapMin` `FractionRuleThickness`, `FractionDenominatorGapMin`, `FractionDenominatorDisplayStyleGapMin`, `SkewedFractionHorizontalGap`,
---`SkewedFractionVerticalGap`, `OverbarVerticalGap`, `OverbarRuleThickness`, `OverbarExtraAscender`, `UnderbarVerticalGap`, `UnderbarRuleThickness`, `UnderbarExtraDescender`, `RadicalVerticalGap`, `RadicalDisplayStyleVerticalGap`, `RadicalRuleThickness`, `RadicalExtraAscender`, `RadicalKernBeforeDegree`, `RadicalKernAfterDegree`, `RadicalDegreeBottomRaisePercent`, `MinConnectorOverlap`, `FractionDelimiterSize` and `FractionDelimiterDisplayStyleSize`.
---
----------------------------------------------------------------


---
---# `validation_state`
---
---This is just a bonus table with keys: `bad_ps_fontname`, `bad_glyph_table`, `bad_cff_table`, `bad_metrics_table`, `bad_cmap_table`, `bad_bitmaps_table`, `bad_gx_table`, `bad_ot_table`, `bad_os2_version` and `bad_sfnt_header`.
---
----------------------------------------------------------------


---
---# `horiz_base` and `vert_base`
---
--- key             type   explanation 
---
---@field tags table # an array of script list tags
---@field scripts table # 
---
---The `scripts` subtable:
---
--- key                      type     explanation 
---
---@field baseline table # 
---@field default_baseline number # 
---@field lang table # 
---
---The `lang` subtable:
---
--- key              type    explanation 
---
---@field tag string # a script tag 
---@field ascent number # 
---@field descent number # 
---@field features table # 
---
---The `features` points to an array of tables with the same layout except
---that in those nested tables, the tag represents a language.
---
----------------------------------------------------------------


---
---# `altuni`
---
---An array of alternate *Unicode* values. Inside that array are hashes with:
---
--- key             type    explanation 
---
---@field unicode number # this glyph is also used for this unicode 
---@field variant number # the alternative is driven by this unicode selector 
---
----------------------------------------------------------------


---
---# `vert_variants` and `horiz_variants`
---
--- key                       type    explanation 
---
---@field variants string # 
---@field italic_correction number # 
---@field parts table # 
---
---The `parts` table is an array of smaller tables:
---
--- key               type    explanation 
---
---@field component string # 
---@field extender number # 
---@field start number # 
---@field end number # 
---@field advance number # 
---
----------------------------------------------------------------


---
---# `mathkern`
---
--- key                  type   explanation 
---
---@field top_right table # 
---@field bottom_right table # 
---@field top_left table # 
---@field bottom_left table # 
---
---Each of the subtables is an array of small hashes with two keys:
---
--- key            type    explanation 
---
---@field height number # 
---@field kern number # 
---
----------------------------------------------------------------


---
---# `kerns`
---
---Substructure is identical to the per-glyph subtable.
---
----------------------------------------------------------------


---
---# `vkerns`
---
---Substructure is identical to the per-glyph subtable.
---
----------------------------------------------------------------


---
---# `texdata`
---
--- key            type    explanation 
---
---@field type string # `unset`, `text`, `math`, `mathext` 
--- `params`  array   22 font numeric parameters 
---
----------------------------------------------------------------


---
---# `lookups`
---
---Top-level `lookups` is quite different from the ones at character level.
---The keys in this hash are strings, the values the actual lookups, represented as
---dictionary tables.
---
--- key                   type    explanation 
---
---@field type string # 
--- `format`         enum    one of `glyphs`, `class`, `coverage`, `reversecoverage` 
---@field tag string # 
--- `current_class`  array   
--- `before_class`   array   
--- `after_class`    array   
--- `rules`          array   an array of rule items
---
---Rule items have one common item and one specialized item:
---
--- key                     type   explanation 
---
--- `lookups`          array  a linear array of lookup names                         
--- `glyphs`           array  only if the parent's format is `glyphs`          
--- `class`            array  only if the parent's format is `class`           
--- `coverage`         array  only if the parent's format is `coverage`        
--- `reversecoverage`  array  only if the parent's format is `reversecoverage` 
---
---A glyph table is:
---
--- key           type    explanation 
---
---@field names string # 
---@field back string # 
---@field fore string # 
---
---A class table is:
---
--- key             type   explanation 
---
--- `current`  array  of numbers  
--- `before`   array  of numbers  
--- `after`    array  of numbers  
---
---for coverage:
---
--- key             type   explanation 
---
--- `current`  array  of strings 
--- `before`   array  of strings 
--- `after`    array  of strings 
---
---and for reverse coverage:
---
--- key                  type    explanation 
---
--- `current`       array   of strings  
--- `before`        array   of strings  
--- `after`         array   of strings  
---@field replacements string # 
---
----------------------------------------------------------------


---
----------------------------------------------------------------


---
---\stopchapter
---
---\stopcomponent
---