---% language=us engine=luatex runpath=texruns:manuals/luatex
---
---\environment luatex-style
---
---\startcomponent luatex-fonts
---
---# Font structure
---
---# The font tables
---
---All *TeX* fonts are represented to *Lua* code as tables, and internally as
---\CCODE structures. All keys in the table below are saved in the internal font
---structure if they are present in the table returned by the `define_font`
---callback, or if they result from the normal \TFM/\VF\ reading routines if there
---is no `define_font` callback defined.
---
---The column “\VF” means that this key will be created by the `font.read_vf()` routine, “\TFM” means that the key will be created by the
---`font.read_tfm()` routine, and “used” means whether or not the
---*LuaTeX* engine itself will do something with the key. The top-level keys in
---the table are as follows:
---
--- key                      vf   tfm  used  value type  description 
---
--- `name`              yes  yes  yes   string      metric (file) name 
--- `area`              no   yes  yes   string      (directory) location, typically empty 
--- `used`              no   yes  yes   boolean     indicates usage (initial: false) 
--- `characters`        yes  yes  yes   table       the defined glyphs of this font 
--- `checksum`          yes  yes  no    number      default: 0 
--- `designsize`        no   yes  yes   number      expected size (default: 655360 == 10pt) 
--- `direction`         no   yes  yes   number      default: 0 
--- `encodingbytes`     no   no   yes   number      default: depends on `format` 
--- `encodingname`      no   no   yes   string      encoding name 
--- `fonts`             yes  no   yes   table       locally used fonts 
--- `psname`            no   no   yes   string      This is the *PostScript* fontname in the incoming font source, and it's used as fontname identifier in the *PDF* output. This has to be a valid string, e.g.\ no spaces and such, as the backend will not do a cleanup. This gives complete control to the loader. 
--- `fullname`          no   no   yes   string      output font name, used as a fallback in the *PDF* output if the `psname` is not set 
--- `subfont`           no   no   yes   number      default: 0, index in (`ttc`) font with multiple fonts 
--- `header`            yes  no   no    string      header comments, if any 
--- `hyphenchar`        no   no   yes   number      default: *TeX*'s `hyphenchar` 
--- `parameters`        no   yes  yes   hash        default: 7 parameters, all zero 
--- `size`              no   yes  yes   number      the required scaling (by default the same as designsize) 
--- `skewchar`          no   no   yes   number      default: *TeX*'s `skewchar` 
--- `type`              yes  no   yes   string      basic type of this font 
--- `format`            no   no   yes   string      disk format type 
--- `embedding`         no   no   yes   string      *PDF* inclusion  
--- `filename`          no   no   yes   string      the name of the font on disk 
--- `tounicode`         no   yes  yes   number      When this is set to 1 *LuaTeX* assumes per-glyph tounicode entries are present in the font. 
--- `stretch`           no   no   yes   number      the “stretch” value from `expandglyphsinfont` 
--- `shrink`            no   no   yes   number      the “shrink” value from `expandglyphsinfont` 
--- `step`              no   no   yes   number      the “step” value from `expandglyphsinfont` 
--- `expansion_factor`  no   no   no    number      the actual expansion factor of an expanded font 
--- `attributes`        no   no   yes   string      the \orm {pdffontattr} 
--- `cache`             no   no   yes   string      This key controls caching of the *Lua* table on the *TeX* end where `yes` means: use a reference to the table that is passed to *LuaTeX* (this is the default), and `no` means: don't store the table reference, don't cache any *Lua* data for this font while `renew` means: don't store the table reference, but save a reference to the table that is created at the first access to one of its fields in the font. 
--- `nomath`            no   no   yes   boolean     This key allows a minor speedup for text fonts. If it is present and true, then *LuaTeX* will not check the character entries for math-specific keys. 
--- `oldmath`           no   no   yes   boolean     This key flags a font as representing an old school *TeX* math font and disables the *OpenType* code path. 
--- `slant`             no   no   yes   number      This parameter will tilt the font and does the same as `SlantFont` in the map file for \TYPEONE\ fonts. 
--- `extend`            no   no   yes   number      This parameter will scale the font horizontally and does the same as `ExtendFont` in the map file for \TYPEONE\ fonts. 
--- `squeeze`           no   no   yes   number      This parameter will scale the font vertically and has no equivalent in the map file. 
--- `width`             no   no   yes   number      The backend will inject *PDF* operators that set the penwidth. The value is (as usual in *TeX*) divided by 1000. It works with the `mode` file. 
--- `mode`              no   no   yes   number      The backend will inject *PDF* operators that relate to the drawing mode with 0 being a fill, 1 being an outline, 2 both draw and fill and 3 no painting at all. 
---
---The saved reference in the `cache` option is thread-local, so be careful
---when you are using coroutines: an error will be thrown if the table has been
---cached in one thread, but you reference it from another thread.
---
---The key `name` is always required. The keys `stretch`, `shrink`, `step` only have meaning when used together: they can be used to
---replace a post-loading `expandglyphsinfont` command. The `auto_expand` option is not supported in *LuaTeX*. In fact, the primitives that
---create expanded or protruding copies are probably only useful when used with
---traditional fonts because all these extra *OpenType* properties are kept out of
---the picture. The `expansion_factor` is value that can be present inside a
---font in `font.fonts`. It is the actual expansion factor (a value between
---`-shrink` and `stretch`, with step `step`) of a font that was
---automatically generated by the font expansion algorithm.
---
---The `subfont` parameter can be used to specify the subfont in a `ttc`
---font. When given, it is used instead of the `psname` and `fullname`
---combination. The first subfont has number 1. A zero value signals using the names
---as lookup.
---
---Because we store the actual state of expansion with each glyph and don't have
---special font instances, we can change some font related parameters before lines
---are constructed, like:
---
---```
---font.setexpansion(font.current(),100,100,20)
---```
---
---This is mostly meant for experiments (or an optimizing routing written in *Lua*)
---so there is no primitive.
---
---The key `attributes` can be used to set font attributes in the *PDF* file.
---The key `used` is set by the engine when a font is actively in use, this
---makes sure that the font's definition is written to the output file (\DVI\ or
---*PDF*). The \TFM\ reader sets it to false. The `direction` is a number
---signalling the “normal” direction for this font. There are sixteen
---possibilities:
---
--- \#  dir  \#  dir  \#  dir  \#  dir 
---
---  0  LT    4  RT    8  TT   12  BT  
---  1  LL    5  RL    9  TL   13  BL  
---  2  LB    6  RB   10  TB   14  BB  
---  3  LR    7  RR   11  TR   15  BR  
---
---These are \OMEGA-style direction abbreviations: the first character indicates
---the “first” edge of the character glyphs (the edge that is seen first in
---the writing direction), the second the “top” side. Keep in mind that
---*LuaTeX* has a bit different directional model so these values are not used for
---anything.
---
---The `parameters` is a hash with mixed key types. There are seven possible
---string keys, as well as a number of integer indices (these start from 8 up). The
---seven strings are actually used instead of the bottom seven indices, because that
---gives a nicer user interface.
---
---The names and their internal remapping are:
---
--- name                   remapping 
---
--- `slant`          1 
--- `space`          2 
--- `space_stretch`  3 
--- `space_shrink`   4 
--- `x_height`       5 
--- `quad`           6 
--- `extra_space`    7 
---
---The keys `type`, `format`, `embedding`, `fullname` and
---`filename` are used to embed *OpenType* fonts in the result *PDF*.
---
---The `characters` table is a list of character hashes indexed by an integer
---number. The number is the “internal code” *TeX* knows this character by.
---
---Two very special string indexes can be used also: `left_boundary` is a
---virtual character whose ligatures and kerns are used to handle word boundary
---processing. `right_boundary` is similar but not actually used for anything
---(yet).
---
---Each character hash itself is a hash. For example, here is the character “f” (decimal 102) in the font `cmr10 at 10pt`. The numbers that represent
---dimensions are in scaled points.
---
---```
---[102] = {
---    ["width"]  = 200250,
---    ["height"] = 455111,
---    ["depth"]  = 0,
---    ["italic"] = 50973,
---    ["kerns"]  = {
---        [63] = 50973,
---        [93] = 50973,
---        [39] = 50973,
---        [33] = 50973,
---        [41] = 50973
---    },
---    ["ligatures"] = {
---        [102] = { ["char"] = 11, ["type"] = 0 },
---        [108] = { ["char"] = 13, ["type"] = 0 },
---        [105] = { ["char"] = 12, ["type"] = 0 }
---    }
---}
---```
---
---The following top-level keys can be present inside a character hash:
---
--- key                      vf   tfm  used   type     description \NR
---
--- `width`             yes  yes  yes    number   character's width, in sp (default 0) \NR
--- `height`            no   yes  yes    number   character's height, in sp (default 0) \NR
--- `depth`             no   yes  yes    number   character's depth, in sp (default 0) \NR
--- `italic`            no   yes  yes    number   character's italic correction, in sp (default zero) \NR
--- `top_accent`        no   no   maybe  number   character's top accent alignment place, in sp (default zero) \NR
--- `bot_accent`        no   no   maybe  number   character's bottom accent alignment place, in sp (default zero) \NR
--- `left_protruding`   no   no   maybe  number   character's `lpcode` \NR
--- `right_protruding`  no   no   maybe  number   character's `rpcode` \NR
--- `expansion_factor`  no   no   maybe  number   character's `efcode` \NR
--- `tounicode`         no   no   maybe  string   character's *Unicode* equivalent(s), in *UTF-8*-16BE hexadecimal format \NR table    character's *Unicode* equivalent, as an array of (integer) *Unicode* codepoints \NR
--- `next`              no   yes  yes    number   the “next larger” character index \NR
--- `extensible`        no   yes  yes    table    the constituent parts of an extensible recipe \NR
--- `vert_variants`     no   no   yes    table    constituent parts of a vertical variant set 
--- `horiz_variants`    no   no   yes    table    constituent parts of a horizontal variant set 
--- `kerns`             no   yes  yes    table    kerning information \NR
--- `ligatures`         no   yes  yes    table    ligaturing information \NR
--- `commands`          yes  no   yes    array    virtual font commands \NR
--- `name`              no   no   no     string   the character (*PostScript*) name \NR
--- `index`             no   no   yes    number   the (*OpenType* or *TrueType*) font glyph index \NR
--- `used`              no   yes  yes    boolean  typeset already (default: false) \NR
--- `mathkern`          no   no   yes    table    math cut-in specifications \NR
---
---The values of `top_accent`, `bot_accent` and `mathkern` are
---used only for math accent and superscript placement, see \at {page} [math] in
---this manual for details. The values of `left_protruding` and `right_protruding` are used only when `protrudechars` is non-zero. Whether
---or not `expansion_factor` is used depends on the font's global expansion
---settings, as well as on the value of `adjustspacing`.
---
---The usage of `tounicode` is this: if this font specifies a `tounicode=1` at the top level, then *LuaTeX* will construct a `/ToUnicode`
---entry for the *PDF* font (or font subset) based on the character-level `tounicode` strings, where they are available. If a character does not have a
---sensible *Unicode* equivalent, do not provide a string either (no empty strings).
---
---If the font level `tounicode` is not set, then *LuaTeX* will build up `/ToUnicode` based on the *TeX* code points you used, and any character-level
---`tounicodes` will be ignored. The string format is exactly the format that
---is expected by Adobe \CMAP\ files (*UTF-8*16BE in hexadecimal encoding), minus the
---enclosing angle brackets. For instance the `tounicode` for a `fi`
---ligature would be `00660069`. When you pass a number the conversion will be
---done for you.
---
---A math character can have a `next` field that points to a next larger
---shape. However, the presence of `extensible` will overrule `next`, if
---that is also present. The `extensible` field in turn can be overruled by
---`vert_variants`, the *OpenType* version. The `extensible` table is
---very simple:
---
--- key         type    description                \NR
---
---@field top number # top character index        \NR
---@field mid number # middle character index     \NR
---@field bot number # bottom character index     \NR
---@field rep number # repeatable character index \NR
---
---The `horiz_variants` and `vert_variants` are arrays of components.
---Each of those components is itself a hash of up to five keys:
---
--- key              type    explanation 
---
---@field glyph number # The character index. Note that this is an encoding number, not a name. 
---@field extender number # One (1) if this part is repeatable, zero (0) otherwise. 
---@field start number # The maximum overlap at the starting side (in scaled points). 
---@field end number # The maximum overlap at the ending side (in scaled points). 
---@field advance number # The total advance width of this item. It can be zero or missing, then the natural size of the glyph for character `component` is used. 
---
---The `kerns` table is a hash indexed by character index (and “character index” is defined as either a non-negative integer or the string
---value `right_boundary`), with the values of the kerning to be applied, in
---scaled points.
---
---The `ligatures` table is a hash indexed by character index (and “character index” is defined as either a non-negative integer or the string
---value `right_boundary`), with the values being yet another small hash, with
---two fields:
---
--- key          type    description 
---
---@field type number # the type of this ligature command, default 0 
---@field char number # the character index of the resultant ligature 
---
---The `char` field in a ligature is required. The `type` field inside a
---ligature is the numerical or string value of one of the eight possible ligature
---types supported by *TeX*. When *TeX* inserts a new ligature, it puts the new glyph
---in the middle of the left and right glyphs. The original left and right glyphs
---can optionally be retained, and when at least one of them is kept, it is also
---possible to move the new “insertion point” forward one or two places. The
---glyph that ends up to the right of the insertion point will become the next
---“left”.
---
--- textual (Knuth)        number  string         result      \NR
---
--- `l + r =: n`      0       `=:`      `|n`   \NR
--- `l + r =:| n`     1       `=:|`     `|nr`  \NR
--- `l + r |=: n`     2       `|=:`     `|ln`  \NR
--- `l + r |=:| n`    3       `|=:|`    `|lnr` \NR
--- `l + r  =:|> n`   5       `=:|>`    `n|r`  \NR
--- `l + r |=:> n`    6       `|=:>`    `l|n`  \NR
--- `l + r |=:|> n`   7       `|=:|>`   `l|nr` \NR
--- `l + r |=:|>> n`  11      `|=:|>>`  `ln|r` \NR
---
---The default value is 0, and can be left out. That signifies a “normal”
---ligature where the ligature replaces both original glyphs. In this table the `|`
---indicates the final insertion point.
---
---The `commands` array is explained below.
---
----------------------------------------------------------------


---
---# Real fonts
---
---Whether or not a *TeX* font is a “real” font that should be written to the
---*PDF* document is decided by the `type` value in the top-level font
---structure. If the value is `real`, then this is a proper font, and the
---inclusion mechanism will attempt to add the needed font object definitions to the
---*PDF*. Values for `type` are:
---
--- value           description            \NR
---
--- `real`     this is a base font    \NR
--- `virtual`  this is a virtual font \NR
---
---The actions to be taken depend on a number of different variables:
---
---* Whether the used font fits in an 8-bit encoding scheme or not. This is true for
---    traditional *TeX* fonts that communicate via \TFM\ files.
---
---* The type of the disk font file, for instance a bitmap file or an outline
---    \TYPEONE, *TrueType* or *OpenType* font.
---
---* The level of embedding requested, although in most cases a subset of
---    characters is embedded. The times when nothing got embedded are (in our
---    opinion at least) basically gone.
---
---A font that uses anything other than an 8-bit encoding vector has to be written
---to the *PDF* in a different way. When the font table has `encodingbytes`
---set to 2, then it is a wide font, in all other cases it isn't. The value 2 is the
---default for *OpenType* and *TrueType* fonts loaded via *Lua*. For \TYPEONE\ fonts,
---you have to set `encodingbytes` to 2 explicitly. For \PK\ bitmap fonts,
---wide font encoding is not supported at all.
---
---If no special care is needed, *LuaTeX* falls back to the mapfile-based solution
---used by *PDF*TEX\ and \DVIPS, so that legacy fonts are supported transparently. If
---a “wide” font is used, the new subsystem kicks in, and some extra fields
---have to be present in the font structure. In this case, *LuaTeX* does not use a
---map file at all. These extra fields are: `format`, `embedding`, `fullname`, `cidinfo` (as explained above), `filename`, and the `index` key in the separate characters.
---
---The `format` variable can have the following values. `type3` fonts
---are provided for backward compatibility only, and do not support the new wide
---encoding options.
---
--- value            description                                               
---
--- `type1`     this is a *PostScript* \TYPEONE\ font                     
--- `type3`     this is a bitmapped (\PK) font                            
--- `truetype`  this is a *TrueType* or *TrueType*-based *OpenType* font 
--- `opentype`  this is a *PostScript*-based *OpenType* font             
---
---Valid values for the `embedding` variable are:
---
--- value          description                             
---
--- `no`      don't embed the font at all             
--- `subset`  include and atttempt to subset the font 
--- `full`    include this font in its entirety       
---
---The other fields are used as follows. The `fullname` will be the
---*PostScript*/*PDF* font name. The `cidinfo` will be used as the character
---set: the CID `/Ordering` and `/Registry` keys. The `filename`
---points to the actual font file. If you include the full path in the `filename` or if the file is in the local directory, *LuaTeX* will run a little
---bit more efficient because it will not have to re-run the `find_*_file`
---callback in that case.
---
---Be careful: when mixing old and new fonts in one document, it is possible to
---create *PostScript* name clashes that can result in printing errors. When this
---happens, you have to change the `fullname` of the font to a more unique
---one.
---
---Typeset strings are written out in a wide format using 2 bytes per glyph, using
---the `index` key in the character information as value. The overall effect
---is like having an encoding based on numbers instead of traditional (*PostScript*)
---name-based reencoding. One way to get the correct `index` numbers for
---\TYPEONE\ fonts is by loading the font via `fontloader.open` and use the
---table indices as `index` fields.
---
---In order to make sure that cut and paste of the final document works okay you can
---best make sure that there is a `tounicode` vector enforced. Not all *PDF*
---viewers handle this right so take \ACROBAT\ as reference.
---
----------------------------------------------------------------


---
---# Virtual fonts
---
---# The structure
---
---You have to take the following steps if you want *LuaTeX* to treat the returned
---table from `define_font` as a virtual font:
---
---* Set the top-level key `type` to `virtual`. In most cases it's
---    optional because we look at the `commands` entry anyway.
---
---* Make sure there is at least one valid entry in `fonts` (see below),
---    although recent versions of *LuaTeX* add a default entry when this table is
---    missing.
---
---* Add a `commands` array to those characters that matter. A virtual
---    character can itself point to virtual characters but be careful with nesting
---    as you can create loops and overflow the stack (which often indicates an
---    error anyway).
---
---The presence of the toplevel `type` key with the specific value `virtual` will trigger handling of the rest of the special virtual font fields in
---the table, but the mere existence of 'type' is enough to prevent *LuaTeX* from
---looking for a virtual font on its own. This also works “in reverse”: if
---you are absolutely certain that a font is not a virtual font, assigning the value
---`real` to `type` will inhibit *LuaTeX* from looking for a virtual
---font file, thereby saving you a disk search. This only matters when we load a
---\TFM\ file.
---
---The `fonts` is an (indexed) *Lua* table. The values are one- or two-key
---hashes themselves, each entry indicating one of the base fonts in a virtual font.
---In case your font is referring to itself, you can use the `font.nextid()`
---function which returns the index of the next to be defined font which is probably
---the currently defined one. So, a table looks like this:
---
---```
---fonts = {
---  { name = "ptmr8a", size = 655360 },
---  { name = "psyr", size = 600000 },
---  { id = 38 }
---}
---```
---
---The first referenced font (at index 1) in this virtual font is `ptrmr8a`
---loaded at 10pt, and the second is `psyr` loaded at a little over 9pt. The
---third one is a previously defined font that is known to *LuaTeX* as font id 38.
---The array index numbers are used by the character command definitions that are
---part of each character.
---
---The `commands` array is a hash where each item is another small array,
---with the first entry representing a command and the extra items being the
---parameters to that command. The allowed commands and their arguments are:
---
--- command         arguments  type       description 
---
---@field font`     1          number     select a new font from the local `fonts table # 
--- `char`     1          number     typeset this character number from the current font, and move right by the character's width 
---@field node 1          node       output this node # (list), and move right by the width of this list
--- `slot`     2          2 numbers  a shortcut for the combination of a font and char command
--- `push`     0                     save current position
--- `nop`      0                     do nothing 
--- `pop`      0                     pop position 
--- `rule`     2          2 numbers  output a rule `ht*wd`, and move right. 
--- `down`     1          number     move down on the page 
--- `right`    1          number     move right on the page 
--- `special`  1          string     output a `special` command 
--- `pdf`      2          2 strings  output a *PDF* literal, the first string is one of `origin`, `page`, `text`, `font`, `direct` or `raw`; if you have one string only `origin` is assumed 
--- `lua`      1          string, function   execute a *Lua* script when the glyph is embedded; in case of a function it gets the font id and character code passed 
--- `image`    1          image      output an image (the argument can be either an `<image>` variable or an `image_spec` table) 
--- `comment`  any        any        the arguments of this command are ignored 
---
---When a font id is set to 0 then it will be replaced by the currently assigned
---font id. This prevents the need for hackery with future id's. Normally one could
---use `font.nextid` but when more complex fonts are built in the meantime
---other instances could have been loaded.
---
---The `pdf` option also accepts a `mode` keyword in which case the
---third argument sets the mode. That option will change the mode in an efficient
---way (passing an empty string would result in an extra empty lines in the *PDF*
---file. This option only makes sense for virtual fonts. The `font` mode only
---makes sense in virtual fonts. Modes are somewhat fuzzy and partially inherited
---from *PDF*TEX.
---
--- mode            description 
---
--- `origin`  enter page mode and set the position 
--- `page`    enter page mode 
--- `text`    enter text mode 
--- `font`    enter font mode (kind of text mode, only in virtual fonts) 
--- `always`  finish the current string and force a transform if needed 
--- `raw`     finish the current string 
---
---You always need to check what *PDF* code is generated because there can be all
---kind of interferences with optimization in the backend and fonts are complicated
---anyway. Here is a rather elaborate glyph commands example using such keys:
---
---```
---...
---commands = {
---    { "push" },                     -- remember where we are
---    { "right", 5000 },              -- move right about 0.08pt
---    { "font", 3 },                  -- select the fonts[3] entry
---    { "char", 97 },                 -- place character 97 (ASCII 'a')
--- -- { "slot", 2, 97 },              -- an alternative for the previous two
---    { "pop" },                      -- go all the way back
---    { "down", -200000 },            -- move upwards by about 3pt
---    { "special", "pdf: 1 0 0 rg" }  -- switch to red color
--- -- { "pdf", "origin", "1 0 0 rg" } -- switch to red color (alternative)
---    { "rule", 500000, 20000 }       -- draw a bar
---    { "special", "pdf: 0 g" }       -- back to black
--- -- { "pdf", "origin", "0 g" }      -- back to black (alternative)
---}
---...
---```
---
---The default value for `font` is always 1 at the start of the
---`commands` array. Therefore, if the virtual font is essentially only a
---re-encoding, then you do usually not have created an explicit “font”
---command in the array.
---
---Rules inside of `commands` arrays are built up using only two dimensions:
---they do not have depth. For correct vertical placement, an extra `down`
---command may be needed.
---
---Regardless of the amount of movement you create within the `commands`, the
---output pointer will always move by exactly the width that was given in the `width` key of the character hash. Any movements that take place inside the `commands` array are ignored on the upper level.
---
---The special can have a `pdf:`, `pdf:origin:`,  `pdf:page:`,
---`pdf:direct:` or  `pdf:raw:` prefix. When you have to concatenate
---strings using the `pdf` command might be more efficient.
---
---# Artificial fonts
---
---Even in a “real” font, there can be virtual characters. When *LuaTeX*
---encounters a `commands` field inside a character when it becomes time to
---typeset the character, it will interpret the commands, just like for a true
---virtual character. In this case, if you have created no “fonts” array,
---then the default (and only) “base” font is taken to be the current font
---itself. In practice, this means that you can create virtual duplicates of
---existing characters which is useful if you want to create composite characters.
---
---Note: this feature does {\it not\/} work the other way around. There can not be
---“real” characters in a virtual font! You cannot use this technique for
---font re-encoding either; you need a truly virtual font for that (because
---characters that are already present cannot be altered).
---
---# Example virtual font
---
---Finally, here is a plain *TeX* input file with a virtual font demonstration:
---
---\startbuffer
---\directlua {
---  callback.register('define_font',
---    function (name,size)
---      if name == 'cmr10-red' then
---        local f = font.read_tfm('cmr10',size)
---        f.name  = 'cmr10-red'
---        f.type  = 'virtual'
---        f.fonts = { { name = 'cmr10', size = size }
---        }
---        for i,v in pairs(f.characters) do if string.char(i):find('[tacohanshartmut]') then v.commands = { { "special", "pdf: 1 0 0 rg" }, { "char", i }, { "special", "pdf: 0 g" }, } end
---        end
---        return f
---      else
---        return font.read_tfm(name,size)
---      end
---    end
---  )
---}
---
---\font\myfont  = cmr10-red at 10pt \myfont  This is a line of text \par
---\font\myfontx = cmr10     at 10pt \myfontx Here is another line of text \par
---\stopbuffer
---
---\typebuffer
---
----------------------------------------------------------------


---
---# The `vf` library
---
---The `vf` library can be used when *Lua* code, as defined in the `commands` of the font, is executed. The functions provided are similar as the
---commands: `char`, `down`, `fontid`, `image`, `node`, `nop`, `pop`, `push`, `right`, `rule`, `special` and `pdf`. This library has been present for a while but not been
---advertised and tested much, if only because it's easy to define an invalid font
---(or mess up the *PDF* stream). Keep in mind that the *Lua* snippets are executed
---each time when a character is output.
---
----------------------------------------------------------------


---
---# The `font` library
---
---The font library provides the interface into the internals of the font system,
---and it also contains helper functions to load traditional *TeX* font metrics
---formats. Other font loading functionality is provided by the `fontloader`
---library that will be discussed in the next section.
---
---# Loading a \TFM\ file
---
---The behaviour documented in this subsection is considered stable in the sense that
---there will not be backward-incompatible changes any more.
---
---```
---<table> fnt =
---    font.read_tfm(<string> name, <number> s)
---```
---
---The number is a bit special:
---
---* If it is positive, it specifies an “at size” in scaled points.
---
---* If it is negative, its absolute value represents a “scaled”
---    setting relative to the designsize of the font.
---
---# Loading a \VF\ file
---
---The behavior documented in this subsection is considered stable in the sense that
---there will not be backward-incompatible changes any more.
---
---```
---<table> vf_fnt =
---    font.read_vf(<string> name, <number> s)
---```
---
---The meaning of the number `s` and the format of the returned table are
---similar to the ones in the `read_tfm` function.
---
---# The fonts array
---
---The whole table of *TeX* fonts is accessible from *Lua* using a virtual array.
---
---```
---font.fonts[n] = { ... }
---<table> f = font.fonts[n]
---```
---
---Because this is a virtual array, you cannot call `pairs` on it, but see
---below for the `font.each` iterator.
---
---The two metatable functions implementing the virtual array are:
---
---```
---<table> f = font.getfont(<number> n)
---font.setfont(<number> n, <table> f)
---```
---
---Note that at the moment, each access to the `font.fonts` or call to `font.getfont` creates a *Lua* table for the whole font unless you cached it.
---If you want a copy of the internal data you can use `font.getcopy`:
---
---```
---<table> f = font.getcopy(<number> n)
---```
---
---This one will return a table of the parameters as known to *TeX*. These can be
---different from the ones in the cached table:
---
---```
---<table> p = font.getparameters(<number> n)
---```
---
---Also note the following: assignments can only be made to fonts that have already
---been defined in *TeX*, but have not been accessed {\it at all\/} since that
---definition. This limits the usability of the write access to `font.fonts`
---quite a lot, a less stringent ruleset will likely be implemented later.
---
---# Checking a font's status
---
---You can test for the status of a font by calling this function:
---
---```
---<boolean> f =
---    font.frozen(<number> n)
---```
---
---The return value is one of `true` (unassignable), `false` (can be
---changed) or `nil` (not a valid font at all).
---
---# Defining a font directly
---
---You can define your own font into `font.fonts` by calling this function:
---
---```
---<number> i =
---    font.define(<table> f)
---```
---
---The return value is the internal id number of the defined font (the index into
---`font.fonts`). If the font creation fails, an error is raised. The table is
---a font structure. An alternative call is:
---
---```
---<number> i =
---    font.define(<number> n, <table> f)
---```
---
---Where the first argument is a reserved font id (see below).
---
---# Unicode mappings
---
---The `glyphtounicode` extension is similar to the one in *PDF*TEX\ but
---doesn't offer a way to set it per font. This has to do with the fact that we
---store fonts differently and that one can overload the default font loader. If you
---want to tune a specific font, you can use a *Lua* helper as shown below in plain
---*TeX* code.
---
---```
---% ToUnicode vectors will be added
---
---\pdfvariable gentounicode 1
---
---% Wrap a helper in a macro:
---
---\protected\def\luaglyphtounicode#1#2%
---  {\directlua{font.settounicode(\fontid\font,\number#1,"#2")}}
---
---% Use the global mapper:
---
---\pdfextension glyphtounicode {A}{0042}
---
---% Test this:
---
---{A \font\test=cmss10 \test  A}
---
---% Define a non unicode symbol font:
---
---\font\orn = OrnementsADF at 10pt
---
---% Register mappings:
---
---\bgroup \orn
---    \luaglyphtounicode{42}{2B9C}
---    \luaglyphtounicode{65}{2B9D}
---\egroup
---
---% Test this:
---
---{\orn \char42 \char65 A} A
---
---% And see if cut-n-paste from the pdf file works.
---```
---
---Of course wrapping the helper is macro package dependent. This feature was added
---for the 2026 release and should not interfere with previous behavior. As a side
---note: adding the vectors to the pdf file for \TYPEONE\ fonts only happens when
---there is at least one global extension entry, but this *Lua* driven one doesn't
---have that limitation. This means that when you use the font specific method, it
---also can trigger vectors for other eight bit fonts.
---
---# Extending a font
---
---Within reasonable bounds you can extend a font after it has been defined. Because
---some properties are best left unchanged this is limited to adding characters.
---
---```
---font.addcharacters(<number> n, <table> f)
---```
---
---The table passed can have the fields `characters` which is a (sub)table
---like the one used in define, and for virtual fonts a `fonts` table can be
---added. The characters defined in the `characters` table are added (when not
---yet present) or replace an existing entry. Keep in mind that replacing can have
---side effects because a character already can have been used. Instead of posing
---restrictions we expect the user to be careful. (The `setfont` helper is
---a more drastic replacer.)
---
---# Projected next font id
---
---```
---<number> i =
---    font.nextid()
---```
---
---This returns the font id number that would be returned by a `font.define`
---call if it was executed at this spot in the code flow. This is useful for virtual
---fonts that need to reference themselves. If you pass `true` as argument,
---the id gets reserved and you can pass to `font.define` as first argument.
---This can be handy when you create complex virtual fonts.
---
---```
---<number> i =
---    font.nextid(true)
---```
---
---# Font ids
---
---```
---<number> i =
---    font.id(<string> csname)
---```
---
---This returns the font id associated with `csname`, or `-1` if `csname` is not defined.
---
---```
---<number> i =
---    font.max()
---```
---
---This is the largest used index in `font.fonts`.
---
---```
---<number> i = font.current()
---font.current(<number> i)
---```
---
---This gets or sets the currently used font number.
---
---# Iterating over all fonts
---
---```
---for i,v in font.each() do
---  ...
---end
---```
---
---This is an iterator over each of the defined *TeX* fonts. The first returned
---value is the index in `font.fonts`, the second the font itself, as a *Lua*
---table. The indices are listed incrementally, but they do not always form an array
---of consecutive numbers: in some cases there can be holes in the sequence.
---
---# `\glyphdimensionsmode`
---
---Already in the early days of *LuaTeX* the decision was made to calculate the
---effective height and depth of glyphs in a way that reflected the applied vertical
---offset. The height got that offset added, the depth only when the offset was
---larger than zero. We can now control this in more detail with this mode
---parameter. An offset is added to the height and/or subtracted from the depth.
---The effective values are never negative. The zero mode is the default.
---
--- value      effect \NR
---
--- `0`  the old behavior: add the offset to the height and only subtract the offset only from the depth when it is positive 
--- `1`  add the offset to the height and subtract it from the depth 
--- `2`  add the offset to the height and subtract it from the depth but keep the maxima of the current and previous results 
--- `3`  use the height and depth of the glyph, so no offset is applied 
---
----------------------------------------------------------------


---
---# `\discretionaryligaturemode`
---
---This parameter controls how complex ligatures interact with discretionaries (as
---injected by the hyphenator). The non||zero values prevent the construction of
---so called init and select discretionaries.
---
---\definefontfeature[ligmodetest][default][mode=base]
---\definefont       [ligmodefont][Serif*ligmodetest]
---
---\hyphenation{xx-f-f-i-xx}
---
---     0  1  2 
---    
---     \ligmodefont \discretionaryligaturemode0 \hsize1pt xxffixx
---     \ligmodefont \discretionaryligaturemode1 \hsize1pt xxffixx
---     \ligmodefont \discretionaryligaturemode2 \hsize1pt xxffixx 
---    
---
----------------------------------------------------------------


---
---# `\tracinglostchars`
---
---This tracer reports missing characters. By design we delay this till the backend
---included them, when math typesetting needs them, or when a virtual font is
---created (1, 2, 3). Per request of the \LATEX\ team we have two extra options that
---report in an earlier stage i.e.\ when the glyphs are packaged or processed during
---line breaking (4 and 5).
--- effect 
---    
---     0    nothing 
---     1    warning only to log file 
---     2    warning and force terminal 
---     3    error 
---     4    early warning (and force terminal) 
---     > 4  early error 
---    
---
----------------------------------------------------------------


---
----------------------------------------------------------------


---
---\stopchapter
---
---\stopcomponent
---